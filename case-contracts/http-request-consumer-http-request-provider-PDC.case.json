{
  "contractType": "case::contract",
  "description": {
    "consumerName": "http request consumer",
    "providerName": "http request provider"
  },
  "metadata": {
    "case": {
      "version": "0.4.0"
    }
  },
  "matcherLookup": {
    "matcher:an http \"GET\" request to \"/health\" without a body with the following headers an object shaped like {accept: \"application/json\"}": {
      "method": "GET",
      "path": "/health",
      "headers": {
        "accept": "application/json"
      },
      "case:matcher:type": "HttpRequestMatcher"
    },
    "matcher:a (200) response with body an object shaped like {status: \"up\"}": {
      "status": 200,
      "body": {
        "status": "up"
      },
      "case:matcher:type": "HttpResponseMatcher"
    },
    "matcher:an http \"GET\" request to \"/health\" without a body": {
      "method": "GET",
      "path": "/health",
      "case:matcher:type": "HttpRequestMatcher"
    },
    "matcher:a (200) response with body an object shaped like {status: <any string>}": {
      "status": 200,
      "body": {
        "case:matcher:type": "CascadingContext",
        "case:matcher:child": {
          "status": "whatever"
        },
        "case:context:matchBy": "type"
      },
      "case:matcher:type": "HttpResponseMatcher"
    },
    "matcher:a (httpStatus 4XX | 5XX) response without a body": {
      "status": {
        "case:matcher:type": "HttpStatusCode",
        "case:matcher:example": 400,
        "case:matcher:rule": [
          "4XX",
          "5XX"
        ],
        "case:matcher:resolvesTo": "HttpStatusCode"
      },
      "case:matcher:type": "HttpResponseMatcher"
    },
    "matcher:a (503) response with body an object shaped like {status: \"down\"}": {
      "status": 503,
      "body": {
        "status": "down"
      },
      "case:matcher:type": "HttpResponseMatcher"
    },
    "variable:default:userId": {
      "case:matcher:type": "CascadingContext",
      "case:matcher:child": {
        "case:matcher:type": "CascadingContext",
        "case:matcher:child": "123",
        "case:context:matchBy": "type"
      },
      "case:context:matchBy": "type"
    },
    "matcher:an http \"GET\" request to \"/users\"?id={{userId}} without a body": {
      "method": "GET",
      "path": "/users",
      "query": {
        "id": {
          "case:matcher:type": "ContextVariable",
          "case:matcher:variableName": "userId"
        }
      },
      "case:matcher:type": "HttpRequestMatcher"
    },
    "matcher:a (200) response with body an object shaped like {userId: {{userId}}}": {
      "status": 200,
      "body": {
        "userId": {
          "case:matcher:type": "ContextVariable",
          "case:matcher:variableName": "userId"
        }
      },
      "case:matcher:type": "HttpResponseMatcher"
    },
    "matcher:a (404) response without a body": {
      "status": 404,
      "case:matcher:type": "HttpResponseMatcher"
    },
    "matcher:an http \"GET\" request to \"/users/{{userId}}\" without a body": {
      "method": "GET",
      "path": {
        "case:matcher:type": "StringPrefix",
        "case:matcher:prefix": "/users/",
        "case:matcher:suffix": {
          "case:matcher:type": "ContextVariable",
          "case:matcher:variableName": "userId"
        },
        "case:matcher:resolvesTo": "string"
      },
      "case:matcher:type": "HttpRequestMatcher"
    },
    "matcher:an http \"GET\" request to \"/users/123\" without a body": {
      "method": "GET",
      "path": {
        "case:matcher:type": "StringPrefix",
        "case:matcher:prefix": "/users/",
        "case:matcher:suffix": "123",
        "case:matcher:resolvesTo": "string"
      },
      "case:matcher:type": "HttpRequestMatcher"
    }
  },
  "examples": [
    {
      "states": [
        {
          "case:state:type": "NamedState",
          "stateName": "Server is up"
        }
      ],
      "mock": {
        "request": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "an http \"GET\" request to \"/health\" without a body with the following headers an object shaped like {accept: \"application/json\"}",
          "case:matcher:child": {
            "method": "GET",
            "path": "/health",
            "headers": {
              "accept": "application/json"
            },
            "case:matcher:type": "HttpRequestMatcher"
          }
        },
        "response": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "a (200) response with body an object shaped like {status: \"up\"}",
          "case:matcher:child": {
            "status": 200,
            "body": {
              "status": "up"
            },
            "case:matcher:type": "HttpResponseMatcher"
          }
        },
        "case:mock:type": "MockHttpClient",
        "case:run:context:setup": {
          "write": {
            "type": "MockHttpClient",
            "stateVariables": "state",
            "triggers": "generated"
          },
          "read": {
            "type": "MockHttpServer",
            "stateVariables": "default",
            "triggers": "provided"
          }
        }
      },
      "result": "VERIFIED"
    },
    {
      "states": [
        {
          "case:state:type": "NamedState",
          "stateName": "Server is up"
        }
      ],
      "mock": {
        "request": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "an http \"GET\" request to \"/health\" without a body",
          "case:matcher:child": {
            "method": "GET",
            "path": "/health",
            "case:matcher:type": "HttpRequestMatcher"
          }
        },
        "response": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "a (200) response with body an object shaped like {status: <any string>}",
          "case:matcher:child": {
            "status": 200,
            "body": {
              "case:matcher:type": "CascadingContext",
              "case:matcher:child": {
                "status": "whatever"
              },
              "case:context:matchBy": "type"
            },
            "case:matcher:type": "HttpResponseMatcher"
          }
        },
        "case:mock:type": "MockHttpClient",
        "case:run:context:setup": {
          "write": {
            "type": "MockHttpClient",
            "stateVariables": "state",
            "triggers": "generated"
          },
          "read": {
            "type": "MockHttpServer",
            "stateVariables": "default",
            "triggers": "provided"
          }
        }
      },
      "result": "VERIFIED"
    },
    {
      "states": [
        {
          "case:state:type": "NamedState",
          "stateName": "Server is down"
        }
      ],
      "mock": {
        "request": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "an http \"GET\" request to \"/health\" without a body",
          "case:matcher:child": {
            "method": "GET",
            "path": "/health",
            "case:matcher:type": "HttpRequestMatcher"
          }
        },
        "response": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "a (httpStatus 4XX | 5XX) response without a body",
          "case:matcher:child": {
            "status": {
              "case:matcher:type": "HttpStatusCode",
              "case:matcher:example": 400,
              "case:matcher:rule": [
                "4XX",
                "5XX"
              ],
              "case:matcher:resolvesTo": "HttpStatusCode"
            },
            "case:matcher:type": "HttpResponseMatcher"
          }
        },
        "case:mock:type": "MockHttpClient",
        "case:run:context:setup": {
          "write": {
            "type": "MockHttpClient",
            "stateVariables": "state",
            "triggers": "generated"
          },
          "read": {
            "type": "MockHttpServer",
            "stateVariables": "default",
            "triggers": "provided"
          }
        }
      },
      "result": "VERIFIED"
    },
    {
      "states": [
        {
          "case:state:type": "NamedState",
          "stateName": "Server is down"
        }
      ],
      "mock": {
        "request": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "an http \"GET\" request to \"/health\" without a body",
          "case:matcher:child": {
            "method": "GET",
            "path": "/health",
            "case:matcher:type": "HttpRequestMatcher"
          }
        },
        "response": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "a (503) response with body an object shaped like {status: \"down\"}",
          "case:matcher:child": {
            "status": 503,
            "body": {
              "status": "down"
            },
            "case:matcher:type": "HttpResponseMatcher"
          }
        },
        "case:mock:type": "MockHttpClient",
        "case:run:context:setup": {
          "write": {
            "type": "MockHttpClient",
            "stateVariables": "state",
            "triggers": "generated"
          },
          "read": {
            "type": "MockHttpServer",
            "stateVariables": "default",
            "triggers": "provided"
          }
        }
      },
      "result": "VERIFIED"
    },
    {
      "states": [
        {
          "case:state:type": "NamedState",
          "stateName": "Server is up"
        },
        {
          "case:state:type": "StateWithVariables",
          "stateName": "A user exists",
          "variables": {
            "userId": {
              "case:matcher:type": "CascadingContext",
              "case:matcher:child": "123",
              "case:context:matchBy": "type"
            }
          }
        }
      ],
      "mock": {
        "request": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "an http \"GET\" request to \"/users\"?id={{userId}} without a body",
          "case:matcher:child": {
            "method": "GET",
            "path": "/users",
            "query": {
              "id": {
                "case:matcher:type": "ContextVariable",
                "case:matcher:variableName": "userId"
              }
            },
            "case:matcher:type": "HttpRequestMatcher"
          }
        },
        "response": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "a (200) response with body an object shaped like {userId: {{userId}}}",
          "case:matcher:child": {
            "status": 200,
            "body": {
              "userId": {
                "case:matcher:type": "ContextVariable",
                "case:matcher:variableName": "userId"
              }
            },
            "case:matcher:type": "HttpResponseMatcher"
          }
        },
        "case:mock:type": "MockHttpClient",
        "case:run:context:setup": {
          "write": {
            "type": "MockHttpClient",
            "stateVariables": "state",
            "triggers": "generated"
          },
          "read": {
            "type": "MockHttpServer",
            "stateVariables": "default",
            "triggers": "provided"
          }
        }
      },
      "result": "VERIFIED"
    },
    {
      "states": [
        {
          "case:state:type": "NamedState",
          "stateName": "Server is up"
        },
        {
          "case:state:type": "NamedState",
          "stateName": "No users exist"
        }
      ],
      "mock": {
        "request": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "an http \"GET\" request to \"/users\"?id={{userId}} without a body",
          "case:matcher:child": {
            "method": "GET",
            "path": "/users",
            "query": {
              "id": {
                "case:matcher:type": "ContextVariable",
                "case:matcher:variableName": "userId"
              }
            },
            "case:matcher:type": "HttpRequestMatcher"
          }
        },
        "response": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "a (404) response without a body",
          "case:matcher:child": {
            "status": 404,
            "case:matcher:type": "HttpResponseMatcher"
          }
        },
        "case:mock:type": "MockHttpClient",
        "case:run:context:setup": {
          "write": {
            "type": "MockHttpClient",
            "stateVariables": "state",
            "triggers": "generated"
          },
          "read": {
            "type": "MockHttpServer",
            "stateVariables": "default",
            "triggers": "provided"
          }
        }
      },
      "result": "VERIFIED"
    },
    {
      "states": [
        {
          "case:state:type": "NamedState",
          "stateName": "Server is up"
        },
        {
          "case:state:type": "StateWithVariables",
          "stateName": "A user exists",
          "variables": {
            "userId": {
              "case:matcher:type": "CascadingContext",
              "case:matcher:child": "123",
              "case:context:matchBy": "type"
            }
          }
        }
      ],
      "mock": {
        "request": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "an http \"GET\" request to \"/users/{{userId}}\" without a body",
          "case:matcher:child": {
            "method": "GET",
            "path": {
              "case:matcher:type": "StringPrefix",
              "case:matcher:prefix": "/users/",
              "case:matcher:suffix": {
                "case:matcher:type": "ContextVariable",
                "case:matcher:variableName": "userId"
              },
              "case:matcher:resolvesTo": "string"
            },
            "case:matcher:type": "HttpRequestMatcher"
          }
        },
        "response": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "a (200) response with body an object shaped like {userId: {{userId}}}",
          "case:matcher:child": {
            "status": 200,
            "body": {
              "userId": {
                "case:matcher:type": "ContextVariable",
                "case:matcher:variableName": "userId"
              }
            },
            "case:matcher:type": "HttpResponseMatcher"
          }
        },
        "case:mock:type": "MockHttpClient",
        "case:run:context:setup": {
          "write": {
            "type": "MockHttpClient",
            "stateVariables": "state",
            "triggers": "generated"
          },
          "read": {
            "type": "MockHttpServer",
            "stateVariables": "default",
            "triggers": "provided"
          }
        }
      },
      "result": "VERIFIED"
    },
    {
      "states": [
        {
          "case:state:type": "NamedState",
          "stateName": "Server is up"
        },
        {
          "case:state:type": "NamedState",
          "stateName": "No users exist"
        }
      ],
      "mock": {
        "request": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "an http \"GET\" request to \"/users/123\" without a body",
          "case:matcher:child": {
            "method": "GET",
            "path": {
              "case:matcher:type": "StringPrefix",
              "case:matcher:prefix": "/users/",
              "case:matcher:suffix": "123",
              "case:matcher:resolvesTo": "string"
            },
            "case:matcher:type": "HttpRequestMatcher"
          }
        },
        "response": {
          "case:matcher:type": "Lookup",
          "case:matcher:uniqueName": "a (404) response without a body",
          "case:matcher:child": {
            "status": 404,
            "case:matcher:type": "HttpResponseMatcher"
          }
        },
        "case:mock:type": "MockHttpClient",
        "case:run:context:setup": {
          "write": {
            "type": "MockHttpClient",
            "stateVariables": "state",
            "triggers": "generated"
          },
          "read": {
            "type": "MockHttpServer",
            "stateVariables": "default",
            "triggers": "provided"
          }
        }
      },
      "result": "VERIFIED"
    }
  ],
  "consumer": {
    "name": "http request consumer"
  },
  "provider": {
    "name": "http request provider"
  }
}